C01 - Building a zombie factory

aim:
1. DB of all the zombies created
2. a function for creating new zombies
3. random and unique appearance for each zombie

Will be building a zombie DNA also - a 16 digit number which will define the appearance of a zombie
first 2 digit - zombie's head, second 2 digit - eyes, etc.



C02 - Contracts

Contract is the fundamental building block of Ethereum apps - starting part of all projects
Pragma - its a declaration of the version of Solidity compiler, this code should be using; to prevent breaking of your code if any newer versions of Solidity compiler is introduced in the future



C03 - State Variables and Integers

State Variables - variable that are permanently stored on the Ethereum blockchain/contract storage

Uint - Unsigned Integers
here, uint is actually an alias for uint265. a 256-bit unsigned Integers



C04 - Math Operations

basic - same as of other programming languages



C05 - Structs

basically a more complex data type - like a class

struct Zombie {
    string name;
    uint dna;
}



C06 - Arrays

2 types of arrays in solidity - fixed and dynamic
Fixed - uint[2] fixedArray;
      - string[5] stringArray;
Dynamic - uint[] dynamicArray;

we can also create an array of structs:
Zombie[] public zombies;   (from C05)

here, see that a dynamic array of structs will be similar to that of a database as you will be storing the state varibles, which get stored on the contract storage/Ethereum blockchain

* Public Arrays:
solidity will already create a getter method for such arrays
other contracts will be able to read from (not write) - hence good for storing public data in the contract



C07 - Function Declaration

at first - a solidity function can receive arguements in 2 ways:
1. by value - here, the solidity compiler makes a copy of the original variable and passes it to the function, so that you can alter the value of the parameter, but the original variable won't get effected.
2. by reference - it means you receive the original variable as it is by reference and any change in that will change the original variable.

* its a convention to start the function parameter variable name with a underscore (_), differentiating it with a global variable.

ex: function eatHamburgers(string memory _name, uint _amount) public {

}



C08 - Working with Structs and Arrays

create Persons to the Person truct (basically adding objects from a class)
//Person class
struct Person {
    uint age;
    string name;
}

//making a public dynamic array of struct Person named people
Person[] public people;  

//create a new person (an object) and adding it to the array
Person satoshi = Person(72, "Satoshi")
people.push(satoshi)

//can also be done in one line
people.push(Person(72, "Satoshi"))



C09 - Private/Public Functions

functions by default are public here, that is anyone or any other contract can call and execute its code
NOT desirable as then it'll be vulnerable to attacks, therefore functions should be kept private by default, and make public whenever and whichever function you want to expose to the world

* convention to start the name of our private functions with '_' underscore



C10 - More on functions

* Return Values - ex:
string greeting = "whazzzup";

function sayHello() public returns (string memory) {
    return greeting;
}

* Function Modifiers:
2 modifiers - view and pure
View - function not changing any states, i.e, doesn't change any values or write anything - only viewing the data
ex: function sayHello() public view returns (string memory) 

Pure - not even accessing the state of the app, doesn't even read
ex: function _multiply(uint a, uint b) private pure returns (uint) {
    return a*b;
}



C11 - Keccak256 and Typecasting
ez



C12 - kuch nahi tha



C13 - Events'
event setPerson()
//^/tyhh

to use - emit setPerson()
